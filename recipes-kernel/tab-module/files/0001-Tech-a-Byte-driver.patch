From da504dbf5236256fb46b8f3e8f04c595427d5b25 Mon Sep 17 00:00:00 2001
From: Munawar <munawerali1993@gmail.com>
Date: Sat, 4 Nov 2023 13:10:51 +0100
Subject: [PATCH] Tech a Byte driver

---
 drivers/Kconfig                 |   3 +
 drivers/Makefile                |   1 +
 drivers/helloworld/Kconfig      |   4 +
 drivers/helloworld/Makefile     |   1 +
 drivers/helloworld/tab-driver.c | 158 ++++++++++++++++++++++++++++++++
 5 files changed, 167 insertions(+)
 create mode 100644 drivers/helloworld/Kconfig
 create mode 100644 drivers/helloworld/Makefile
 create mode 100644 drivers/helloworld/tab-driver.c

diff --git a/drivers/Kconfig b/drivers/Kconfig
index 0d399ddaa185..cf5d9008ecfb 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -236,4 +236,7 @@ source "drivers/interconnect/Kconfig"
 source "drivers/counter/Kconfig"
 
 source "drivers/most/Kconfig"
+
+source "drivers/helloworld/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index a110338c860c..69c58fa61624 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -187,3 +187,4 @@ obj-$(CONFIG_GNSS)		+= gnss/
 obj-$(CONFIG_INTERCONNECT)	+= interconnect/
 obj-$(CONFIG_COUNTER)		+= counter/
 obj-$(CONFIG_MOST)		+= most/
+obj-$(CONFIG_HELLO_WORLD) += helloworld/
\ No newline at end of file
diff --git a/drivers/helloworld/Kconfig b/drivers/helloworld/Kconfig
new file mode 100644
index 000000000000..e43a26be1955
--- /dev/null
+++ b/drivers/helloworld/Kconfig
@@ -0,0 +1,4 @@
+config HELLO_WORLD
+	bool "TAB Hello World Driver"
+	help
+	  Tech A Byte Hello World Driver
\ No newline at end of file
diff --git a/drivers/helloworld/Makefile b/drivers/helloworld/Makefile
new file mode 100644
index 000000000000..1872c8ef29ea
--- /dev/null
+++ b/drivers/helloworld/Makefile
@@ -0,0 +1 @@
+obj-$(CONFIG_HELLO_WORLD) := tab-driver.o
\ No newline at end of file
diff --git a/drivers/helloworld/tab-driver.c b/drivers/helloworld/tab-driver.c
new file mode 100644
index 000000000000..efbf91bdb8bc
--- /dev/null
+++ b/drivers/helloworld/tab-driver.c
@@ -0,0 +1,158 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kdev_t.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include<linux/slab.h>                 //kmalloc()
+#include<linux/uaccess.h>              //copy_to/from_user()
+#include <linux/err.h>
+ 
+
+#define mem_size        1024           //Memory Size
+ 
+dev_t dev = 0;
+static struct class *dev_class;
+static struct cdev tab_cdev;
+uint8_t *kernel_buffer;
+
+/*
+** Function Prototypes
+*/
+static int      __init tab_driver_init(void);
+static void     __exit tab_driver_exit(void);
+static int      tab_open(struct inode *inode, struct file *file);
+static int      tab_release(struct inode *inode, struct file *file);
+static ssize_t  tab_read(struct file *filp, char __user *buf, size_t len,loff_t * off);
+static ssize_t  tab_write(struct file *filp, const char *buf, size_t len, loff_t * off);
+
+
+/*
+** File Operations structure
+*/
+static struct file_operations fops =
+{
+        .owner          = THIS_MODULE,
+        .read           = tab_read,
+        .write          = tab_write,
+        .open           = tab_open,
+        .release        = tab_release,
+};
+ 
+/*
+** This function will be called when we open the Device file
+*/
+static int tab_open(struct inode *inode, struct file *file)
+{
+        pr_info("Device File Opened...!!!\n");
+        return 0;
+}
+
+/*
+** This function will be called when we close the Device file
+*/
+static int tab_release(struct inode *inode, struct file *file)
+{
+        pr_info("Device File Closed...!!!\n");
+        return 0;
+}
+
+/*
+** This function will be called when we read the Device file
+*/
+static ssize_t tab_read(struct file *filp, char __user *buf, size_t len, loff_t *off)
+{
+        //Copy the data from the kernel space to the user-space
+        if( copy_to_user(buf, kernel_buffer, mem_size) )
+        {
+                pr_err("Data Read : Err!\n");
+        }
+        pr_info("Data Read : Done!\n");
+        return mem_size;
+}
+
+/*
+** This function will be called when we write the Device file
+*/
+static ssize_t tab_write(struct file *filp, const char __user *buf, size_t len, loff_t *off)
+{
+        //Copy the data to kernel space from the user-space
+        if( copy_from_user(kernel_buffer, buf, len) )
+        {
+                pr_err("Data Write : Err!\n");
+        }
+        pr_info("Data Write : Done!\n");
+        return len;
+}
+
+/*
+** Module Init function
+*/
+static int __init tab_driver_init(void)
+{
+        /*Allocating Major number*/
+        if((alloc_chrdev_region(&dev, 0, 1, "tab_Dev")) <0){
+                pr_info("Cannot allocate major number\n");
+                return -1;
+        }
+        pr_info("Major = %d Minor = %d \n",MAJOR(dev), MINOR(dev));
+ 
+        /*Creating cdev structure*/
+        cdev_init(&tab_cdev,&fops);
+ 
+        /*Adding character device to the system*/
+        if((cdev_add(&tab_cdev,dev,1)) < 0){
+            pr_info("Cannot add the device to the system\n");
+            goto r_class;
+        }
+ 
+        /*Creating struct class*/
+        if(IS_ERR(dev_class = class_create(THIS_MODULE,"tab_class"))){
+            pr_info("Cannot create the struct class\n");
+            goto r_class;
+        }
+ 
+        /*Creating device*/
+        if(IS_ERR(device_create(dev_class,NULL,dev,NULL,"tab_device"))){
+            pr_info("Cannot create the Device 1\n");
+            goto r_device;
+        }
+        
+        /*Creating Physical memory*/
+        if((kernel_buffer = kmalloc(mem_size , GFP_KERNEL)) == 0){
+            pr_info("Cannot allocate memory in kernel\n");
+            goto r_device;
+        }
+        
+        strcpy(kernel_buffer, "Hello_World");
+        
+        pr_info("Device Driver Insert...Done!!!\n");
+        return 0;
+ 
+r_device:
+        class_destroy(dev_class);
+r_class:
+        unregister_chrdev_region(dev,1);
+        return -1;
+}
+
+/*
+** Module exit function
+*/
+static void __exit tab_driver_exit(void)
+{
+  kfree(kernel_buffer);
+        device_destroy(dev_class,dev);
+        class_destroy(dev_class);
+        cdev_del(&tab_cdev);
+        unregister_chrdev_region(dev, 1);
+        pr_info("Device Driver Remove...Done!!!\n");
+}
+ 
+module_init(tab_driver_init);
+module_exit(tab_driver_exit);
+ 
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Simple Linux device driver (Real Linux Device Driver)");
+MODULE_VERSION("1.4");
\ No newline at end of file
-- 
2.17.1

